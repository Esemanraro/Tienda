#!/usr/bin/env python3
"""
Script de Pruebas para Optimizaci√≥n M√≥vil de Tiendita ALOHA
Valida que todas las funcionalidades m√≥viles est√©n funcionando correctamente
"""

import requests
import sys
import time
from urllib.parse import urljoin

class MobileOptimizationTester:
    def __init__(self, base_url="http://127.0.0.1:8080"):
        self.base_url = base_url
        self.session = requests.Session()
        self.test_results = []
        
        # Headers para simular dispositivo m√≥vil
        self.mobile_headers = {
            'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'es-ES,es;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        }
        self.session.headers.update(self.mobile_headers)

    def log_test(self, test_name, success, details=""):
        """Registra el resultado de una prueba"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = f"{status} - {test_name}"
        if details:
            result += f": {details}"
        print(result)
        self.test_results.append({
            'test': test_name,
            'success': success,
            'details': details
        })

    def test_server_availability(self):
        """Prueba que el servidor est√© disponible"""
        try:
            response = self.session.get(self.base_url, timeout=10)
            success = response.status_code == 200
            details = f"Status: {response.status_code}"
            self.log_test("Disponibilidad del Servidor", success, details)
            return success
        except Exception as e:
            self.log_test("Disponibilidad del Servidor", False, str(e))
            return False

    def test_mobile_css_loading(self):
        """Verifica que el CSS m√≥vil se cargue correctamente"""
        try:
            css_url = urljoin(self.base_url, "/static/css/mobile.css")
            response = self.session.get(css_url)
            success = response.status_code == 200 and len(response.content) > 0
            details = f"Size: {len(response.content)} bytes" if success else f"Status: {response.status_code}"
            self.log_test("Carga de CSS M√≥vil", success, details)
            return success
        except Exception as e:
            self.log_test("Carga de CSS M√≥vil", False, str(e))
            return False

    def test_mobile_js_loading(self):
        """Verifica que el JavaScript m√≥vil se cargue correctamente"""
        try:
            js_url = urljoin(self.base_url, "/static/js/mobile.js")
            response = self.session.get(js_url)
            success = response.status_code == 200 and len(response.content) > 0
            details = f"Size: {len(response.content)} bytes" if success else f"Status: {response.status_code}"
            self.log_test("Carga de JavaScript M√≥vil", success, details)
            return success
        except Exception as e:
            self.log_test("Carga de JavaScript M√≥vil", False, str(e))
            return False

    def test_mobile_navigation_elements(self):
        """Verifica que los elementos de navegaci√≥n m√≥vil est√©n presentes"""
        try:
            response = self.session.get(self.base_url)
            content = response.text
            
            # Verificar elementos clave de navegaci√≥n m√≥vil
            mobile_nav_present = 'class="mobile-nav"' in content
            
            # Verificar iconos b√°sicos que siempre est√°n presentes (sin autenticaci√≥n)
            basic_nav_items = [
                'üè†',  # Home icon
                'üîç',  # Search icon
            ]
            
            basic_icons_present = all(icon in content for icon in basic_nav_items)
            
            # Verificar estructura de navegaci√≥n
            nav_structure = '<nav class="mobile-nav">' in content and '<ul>' in content
            
            success = mobile_nav_present and basic_icons_present and nav_structure
            details = f"Nav: {mobile_nav_present}, Iconos b√°sicos: {basic_icons_present}, Estructura: {nav_structure}"
            self.log_test("Elementos de Navegaci√≥n M√≥vil", success, details)
            return success
        except Exception as e:
            self.log_test("Elementos de Navegaci√≥n M√≥vil", False, str(e))
            return False

    def test_responsive_meta_tags(self):
        """Verifica que las meta tags responsive est√©n presentes"""
        try:
            response = self.session.get(self.base_url)
            content = response.text
            
            viewport_meta = 'name="viewport"' in content and 'width=device-width' in content
            mobile_optimized = 'name="mobile-web-app-capable"' in content
            
            success = viewport_meta and mobile_optimized
            details = f"Viewport: {viewport_meta}, Mobile optimized: {mobile_optimized}"
            self.log_test("Meta Tags Responsive", success, details)
            return success
        except Exception as e:
            self.log_test("Meta Tags Responsive", False, str(e))
            return False

    def test_touch_friendly_elements(self):
        """Verifica que los elementos sean touch-friendly"""
        try:
            response = self.session.get(self.base_url)
            content = response.text
            
            # Verificar clases CSS para elementos touch-friendly
            touch_classes = [
                'touch-target',
                'mobile-button',
                'mobile-input'
            ]
            
            touch_elements_present = any(css_class in content for css_class in touch_classes)
            mobile_styles_present = 'mobile.css' in content
            
            success = mobile_styles_present  # Al menos el CSS m√≥vil debe estar presente
            details = f"CSS m√≥vil: {mobile_styles_present}, Touch elements: {touch_elements_present}"
            self.log_test("Elementos Touch-Friendly", success, details)
            return success
        except Exception as e:
            self.log_test("Elementos Touch-Friendly", False, str(e))
            return False

    def test_login_page_mobile(self):
        """Prueba la p√°gina de login en m√≥vil"""
        try:
            login_url = urljoin(self.base_url, "/auth/login")
            response = self.session.get(login_url)
            success = response.status_code == 200
            
            if success:
                content = response.text
                has_mobile_form = 'mobile.css' in content
                has_csrf = 'csrf_token' in content
                success = has_mobile_form and has_csrf
                details = f"Mobile CSS: {has_mobile_form}, CSRF: {has_csrf}"
            else:
                details = f"Status: {response.status_code}"
                
            self.log_test("P√°gina de Login M√≥vil", success, details)
            return success
        except Exception as e:
            self.log_test("P√°gina de Login M√≥vil", False, str(e))
            return False

    def test_shop_page_mobile(self):
        """Prueba la p√°gina principal de la tienda en m√≥vil"""
        try:
            response = self.session.get(self.base_url)
            success = response.status_code == 200
            
            if success:
                content = response.text
                has_product_grid = 'product' in content.lower()
                has_mobile_nav = 'mobile-nav' in content
                success = has_product_grid and has_mobile_nav
                details = f"Grid productos: {has_product_grid}, Nav m√≥vil: {has_mobile_nav}"
            else:
                details = f"Status: {response.status_code}"
                
            self.log_test("P√°gina Principal M√≥vil", success, details)
            return success
        except Exception as e:
            self.log_test("P√°gina Principal M√≥vil", False, str(e))
            return False

    def run_all_tests(self):
        """Ejecuta todas las pruebas"""
        print("üß™ Iniciando Pruebas de Optimizaci√≥n M√≥vil para Tiendita ALOHA")
        print("=" * 60)
        
        # Lista de pruebas a ejecutar
        tests = [
            self.test_server_availability,
            self.test_mobile_css_loading,
            self.test_mobile_js_loading,
            self.test_responsive_meta_tags,
            self.test_mobile_navigation_elements,
            self.test_touch_friendly_elements,
            self.test_login_page_mobile,
            self.test_shop_page_mobile,
        ]
        
        # Ejecutar pruebas
        total_tests = len(tests)
        passed_tests = 0
        
        for test in tests:
            if test():
                passed_tests += 1
            time.sleep(0.5)  # Peque√±a pausa entre pruebas
        
        # Resumen final
        print("\n" + "=" * 60)
        print("üìä RESUMEN DE PRUEBAS M√ìVILES")
        print("=" * 60)
        print(f"Total de pruebas: {total_tests}")
        print(f"Pruebas exitosas: {passed_tests}")
        print(f"Pruebas fallidas: {total_tests - passed_tests}")
        print(f"Tasa de √©xito: {(passed_tests/total_tests)*100:.1f}%")
        
        if passed_tests == total_tests:
            print("\nüéâ ¬°TODAS LAS PRUEBAS M√ìVILES PASARON!")
            print("‚úÖ La optimizaci√≥n m√≥vil est√° funcionando correctamente")
        else:
            print(f"\n‚ö†Ô∏è  {total_tests - passed_tests} pruebas fallaron")
            print("üîß Revisa los detalles arriba para identificar problemas")
        
        return passed_tests == total_tests

def main():
    """Funci√≥n principal"""
    print("üöÄ Tester de Optimizaci√≥n M√≥vil - Tiendita ALOHA")
    print("Verificando funcionalidades m√≥viles...")
    print()
    
    tester = MobileOptimizationTester()
    success = tester.run_all_tests()
    
    # C√≥digo de salida
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
